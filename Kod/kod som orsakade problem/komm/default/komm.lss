
komm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000030a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  0000037e  2**0
                  ALLOC
  2 .debug_aranges 00000080  00000000  00000000  0000037e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000123  00000000  00000000  000003fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000457  00000000  00000000  00000521  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000021f  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004f3  00000000  00000000  00000b97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000110  00000000  00000000  0000108c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000184  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000185  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 21 01 	jmp	0x242	; 0x242 <__vector_18>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  74:	0c 94 83 01 	jmp	0x306	; 0x306 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <USARTInit>:

void USARTInit(uint16_t ubrr_value)
{
	unsigned int ubrr = ubrr_value;
	/* Set baud rate */
	UBRRH = (unsigned char)(ubrr>>8);
  7c:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)ubrr;
  7e:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver, avbrott OK*/
	UCSRB = (1<<RXCIE)|(1<<RXEN);
  80:	80 e9       	ldi	r24, 0x90	; 144
  82:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data 1 stoppbit*/
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
  84:	86 e8       	ldi	r24, 0x86	; 134
  86:	80 bd       	out	0x20, r24	; 32

	SREG |= 0x80; // Global interrupt enable
  88:	8f b7       	in	r24, 0x3f	; 63
  8a:	80 68       	ori	r24, 0x80	; 128
  8c:	8f bf       	out	0x3f, r24	; 63

	DDRD |= 0x32; //Output på RTS,CTS och RXD
  8e:	81 b3       	in	r24, 0x11	; 17
  90:	82 63       	ori	r24, 0x32	; 50
  92:	81 bb       	out	0x11, r24	; 17
    PORTD = (1<<PIND5); //CTS
  94:	80 e2       	ldi	r24, 0x20	; 32
  96:	82 bb       	out	0x12, r24	; 18

}
  98:	08 95       	ret

0000009a <USARTReadChar>:

char USARTReadChar()
{	
  9a:	1f 93       	push	r17
	unsigned char data = 'a';
	
	PORTD = (1<<PIND5);
  9c:	80 e2       	ldi	r24, 0x20	; 32
  9e:	82 bb       	out	0x12, r24	; 18

   while(!(UCSRA & (1<<RXC)))
  a0:	5f 9b       	sbis	0x0b, 7	; 11
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <USARTReadChar+0x6>
   {
      //Do nothing
   }

	data = UDR;
  a4:	1c b1       	in	r17, 0x0c	; 12

	USARTReadChar();
  a6:	0e 94 4d 00 	call	0x9a	; 0x9a <USARTReadChar>

	return data;
}
  aa:	81 2f       	mov	r24, r17
  ac:	1f 91       	pop	r17
  ae:	08 95       	ret

000000b0 <USART_write_char>:


void USART_write_char(unsigned char data)
{
  b0:	98 2f       	mov	r25, r24
	UCSRB=(1<<RXCIE)|(1<<TXEN);
  b2:	88 e8       	ldi	r24, 0x88	; 136
  b4:	8a b9       	out	0x0a, r24	; 10

   while(!(UCSRA & (1<<UDRE)))
  b6:	5d 9b       	sbis	0x0b, 5	; 11
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <USART_write_char+0x6>
   {
      ;//Do nothing
   }

	UCSRA = (1<<TXC);
  ba:	80 e4       	ldi	r24, 0x40	; 64
  bc:	8b b9       	out	0x0b, r24	; 11
	PORTD = (1<<PIND5);
  be:	80 e2       	ldi	r24, 0x20	; 32
  c0:	82 bb       	out	0x12, r24	; 18
  	PORTD = (1<<PIND4);
  c2:	80 e1       	ldi	r24, 0x10	; 16
  c4:	82 bb       	out	0x12, r24	; 18
    UDR = data;
  c6:	9c b9       	out	0x0c, r25	; 12
}
  c8:	08 95       	ret

000000ca <__vector_11>:
//at a given UBRR value

int tolka_och_skicka(unsigned char header,unsigned char data);
void pass_from_PC(unsigned char header,unsigned char data);

ISR(USART_RXC_vect){
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	2f 93       	push	r18
  d6:	3f 93       	push	r19
  d8:	4f 93       	push	r20
  da:	5f 93       	push	r21
  dc:	6f 93       	push	r22
  de:	7f 93       	push	r23
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	af 93       	push	r26
  e6:	bf 93       	push	r27
  e8:	ef 93       	push	r30
  ea:	ff 93       	push	r31

	unsigned char header;
	unsigned char data;

	header = UDR;
  ec:	8c b1       	in	r24, 0x0c	; 12
	while(!(UCSRA & (1<<RXC))){ //While recieve not complete
  ee:	5f 9b       	sbis	0x0b, 7	; 11
  f0:	fe cf       	rjmp	.-4      	; 0xee <__vector_11+0x24>
		;
	}
	data = UDR;
  f2:	6c b1       	in	r22, 0x0c	; 12
	tolka_och_skicka(header,data);
  f4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <tolka_och_skicka>

}
  f8:	ff 91       	pop	r31
  fa:	ef 91       	pop	r30
  fc:	bf 91       	pop	r27
  fe:	af 91       	pop	r26
 100:	9f 91       	pop	r25
 102:	8f 91       	pop	r24
 104:	7f 91       	pop	r23
 106:	6f 91       	pop	r22
 108:	5f 91       	pop	r21
 10a:	4f 91       	pop	r20
 10c:	3f 91       	pop	r19
 10e:	2f 91       	pop	r18
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <komm_init>:
#include <avr/interrupt.h> 

int komm_init()
{
				
				DDRB |= (1<<DDB7) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3); 
 11a:	87 b3       	in	r24, 0x17	; 23
 11c:	88 6b       	ori	r24, 0xB8	; 184
 11e:	87 bb       	out	0x17, r24	; 23
				//1=ut. bit7=SCLK,1 bit6=MISO,0 bit5=MOSI 
				//bit4=SS1(styr) bit3=SS2(sens) bit2=REQ(sens)
				DDRD |= (1<<DDD6) ; //bit3=REQ(styr) bit2=spak 
 120:	8e 9a       	sbi	0x11, 6	; 17
				//bit1=blue(trans) bit0=blue(read)
				SPCR |= (1<<SPE) | (1<<MSTR);
 122:	8d b1       	in	r24, 0x0d	; 13
 124:	80 65       	ori	r24, 0x50	; 80
 126:	8d b9       	out	0x0d, r24	; 13
				MCUCR |=  (1<<ISC11) | (1<<ISC10) | (1<<ISC00); 
 128:	85 b7       	in	r24, 0x35	; 53
 12a:	8d 60       	ori	r24, 0x0D	; 13
 12c:	85 bf       	out	0x35, r24	; 53
				//Interrupts på rising edge för INT1, INT0 triggar på change.
				MCUCSR |= (1<<ISC2);						//interrupts på rising för INT2
 12e:	84 b7       	in	r24, 0x34	; 52
 130:	80 64       	ori	r24, 0x40	; 64
 132:	84 bf       	out	0x34, r24	; 52
				GICR |= (1<<INT1) | (1<<INT0) | (1<<INT2); //Tillåt avbrott på 
 134:	8b b7       	in	r24, 0x3b	; 59
 136:	80 6e       	ori	r24, 0xE0	; 224
 138:	8b bf       	out	0x3b, r24	; 59
				PORTB |= (1<<PB3) | (1<<PB4);	//Båda SS till hög
 13a:	88 b3       	in	r24, 0x18	; 24
 13c:	88 61       	ori	r24, 0x18	; 24
 13e:	88 bb       	out	0x18, r24	; 24
				SREG = (SREG | 0x80);//Tillåt globala avbrott
 140:	8f b7       	in	r24, 0x3f	; 63
 142:	80 68       	ori	r24, 0x80	; 128
 144:	8f bf       	out	0x3f, r24	; 63
				return 0;
}
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	08 95       	ret

0000014c <main>:
		//volatile char SPIF;		//SPI interrupt flag
		

		
		
		komm_init();
 14c:	0e 94 8d 00 	call	0x11a	; 0x11a <komm_init>
		USARTInit(8);
 150:	88 e0       	ldi	r24, 0x08	; 8
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 3e 00 	call	0x7c	; 0x7c <USARTInit>


		while (a<255) {
				a++;
				if (a>254) {
					a = 1;
 158:	21 e0       	ldi	r18, 0x01	; 1
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	14 c0       	rjmp	.+40     	; 0x186 <main+0x3a>
		komm_init();
		USARTInit(8);


		while (a<255) {
				a++;
 15e:	80 91 60 00 	lds	r24, 0x0060
 162:	90 91 61 00 	lds	r25, 0x0061
 166:	01 96       	adiw	r24, 0x01	; 1
 168:	90 93 61 00 	sts	0x0061, r25
 16c:	80 93 60 00 	sts	0x0060, r24
				if (a>254) {
 170:	80 91 60 00 	lds	r24, 0x0060
 174:	90 91 61 00 	lds	r25, 0x0061
 178:	8f 3f       	cpi	r24, 0xFF	; 255
 17a:	91 05       	cpc	r25, r1
 17c:	24 f0       	brlt	.+8      	; 0x186 <main+0x3a>
					a = 1;
 17e:	30 93 61 00 	sts	0x0061, r19
 182:	20 93 60 00 	sts	0x0060, r18
		
		komm_init();
		USARTInit(8);


		while (a<255) {
 186:	80 91 60 00 	lds	r24, 0x0060
 18a:	90 91 61 00 	lds	r25, 0x0061
 18e:	8f 3f       	cpi	r24, 0xFF	; 255
 190:	91 05       	cpc	r25, r1
 192:	2c f3       	brlt	.-54     	; 0x15e <main+0x12>
		return 0;

	

//return 0;
}
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	08 95       	ret

0000019a <transmit_data>:
}
		

int transmit_data(unsigned char data_send)
{
		SPDR=data_send;				//välj data som skickas och starta överföring
 19a:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF))) 	//vänta på att alla data skiftats
 19c:	77 9b       	sbis	0x0e, 7	; 14
 19e:	fe cf       	rjmp	.-4      	; 0x19c <transmit_data+0x2>
		{
		;
		}
		return SPDR;  //clears SPIF och returnerar data som skiftats in
 1a0:	8f b1       	in	r24, 0x0f	; 15
}
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	08 95       	ret

000001a6 <send_to_PC>:
		tolka_och_skicka(header,data);	//Skicka data vidare
		return 0;
}

int send_to_PC(unsigned char header,unsigned char data)
{
 1a6:	1f 93       	push	r17
 1a8:	16 2f       	mov	r17, r22
		
/* Recieve data */
	USART_write_char(header);
 1aa:	0e 94 58 00 	call	0xb0	; 0xb0 <USART_write_char>
	while(!(UCSRA & (1<<TXC))) //While transmission not complete
 1ae:	5e 9b       	sbis	0x0b, 6	; 11
 1b0:	fe cf       	rjmp	.-4      	; 0x1ae <send_to_PC+0x8>
   	{
      ;
   	}
	USART_write_char(data);
 1b2:	81 2f       	mov	r24, r17
 1b4:	0e 94 58 00 	call	0xb0	; 0xb0 <USART_write_char>
	while(!(UCSRA & (1<<TXC))) //While transmission not complete
 1b8:	5e 9b       	sbis	0x0b, 6	; 11
 1ba:	fe cf       	rjmp	.-4      	; 0x1b8 <send_to_PC+0x12>
      ;
   	}

/* Reset flags */
	
	UCSRA = (1<<TXC);
 1bc:	80 e4       	ldi	r24, 0x40	; 64
 1be:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<TXEN);
 1c0:	88 e0       	ldi	r24, 0x08	; 8
 1c2:	8a b9       	out	0x0a, r24	; 10
	UCSRB = (1<<RXCIE)|(1<<RXEN);
 1c4:	80 e9       	ldi	r24, 0x90	; 144
 1c6:	8a b9       	out	0x0a, r24	; 10
	PORTD = (1<<PIND5);
 1c8:	80 e2       	ldi	r24, 0x20	; 32
 1ca:	82 bb       	out	0x12, r24	; 18

	return 0;
}
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	1f 91       	pop	r17
 1d2:	08 95       	ret

000001d4 <tolka_och_skicka>:
		send_to_styr(0x00,0x00);	
}


int tolka_och_skicka(unsigned char header,unsigned char data)
{		
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	18 2f       	mov	r17, r24
 1da:	06 2f       	mov	r16, r22
		unsigned char mal_enhet;
		unsigned char temp_header;
		unsigned char temp_data;
		
		mal_enhet = (header & 0xE0);
 1dc:	80 7e       	andi	r24, 0xE0	; 224


		if(mal_enhet==0x20){
 1de:	80 32       	cpi	r24, 0x20	; 32
 1e0:	21 f4       	brne	.+8      	; 0x1ea <tolka_och_skicka+0x16>
				send_to_sensor(header,data);
 1e2:	81 2f       	mov	r24, r17
 1e4:	0e 94 0b 01 	call	0x216	; 0x216 <send_to_sensor>
 1e8:	11 c0       	rjmp	.+34     	; 0x20c <tolka_och_skicka+0x38>
				}
		else if(mal_enhet==0x40){
 1ea:	80 34       	cpi	r24, 0x40	; 64
 1ec:	21 f4       	brne	.+8      	; 0x1f6 <tolka_och_skicka+0x22>
				send_to_styr(header,data);
 1ee:	81 2f       	mov	r24, r17
 1f0:	0e 94 47 01 	call	0x28e	; 0x28e <send_to_styr>
 1f4:	0b c0       	rjmp	.+22     	; 0x20c <tolka_och_skicka+0x38>
				}
		else if(mal_enhet==0x80){
 1f6:	80 38       	cpi	r24, 0x80	; 128
 1f8:	29 f0       	breq	.+10     	; 0x204 <tolka_och_skicka+0x30>
				send_to_PC(header,data);
				}
		else if(mal_enhet==0xC0){
 1fa:	80 3c       	cpi	r24, 0xC0	; 192
 1fc:	39 f4       	brne	.+14     	; 0x20c <tolka_och_skicka+0x38>
				temp_header=header;
				temp_data=data;
				send_to_styr(header,data);
 1fe:	81 2f       	mov	r24, r17
 200:	0e 94 47 01 	call	0x28e	; 0x28e <send_to_styr>
				send_to_PC(temp_header,temp_data);
 204:	81 2f       	mov	r24, r17
 206:	60 2f       	mov	r22, r16
 208:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <send_to_PC>
		}
		return 0;
}
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	1f 91       	pop	r17
 212:	0f 91       	pop	r16
 214:	08 95       	ret

00000216 <send_to_sensor>:
		return 0;
		}

int send_to_sensor(unsigned char header,unsigned char data)
{
		PORTB &= ~(1<<PB3);		//Låg SS till sensorenhet
 216:	c3 98       	cbi	0x18, 3	; 24
}
		

int transmit_data(unsigned char data_send)
{
		SPDR=data_send;				//välj data som skickas och starta överföring
 218:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF))) 	//vänta på att alla data skiftats
 21a:	77 9b       	sbis	0x0e, 7	; 14
 21c:	fe cf       	rjmp	.-4      	; 0x21a <send_to_sensor+0x4>
		{
		;
		}
		return SPDR;  //clears SPIF och returnerar data som skiftats in
 21e:	9f b1       	in	r25, 0x0f	; 15

int send_to_sensor(unsigned char header,unsigned char data)
{
		PORTB &= ~(1<<PB3);		//Låg SS till sensorenhet
		header=transmit_data(header); 	//Byt header
		while(!(GIFR & (1<<INTF2))) 	//vänta på att andra enheten läst data
 220:	0a b6       	in	r0, 0x3a	; 58
 222:	05 fe       	sbrs	r0, 5
 224:	fd cf       	rjmp	.-6      	; 0x220 <send_to_sensor+0xa>
		{
		;
		}
		GIFR = GIFR & 0x20;						
 226:	8a b7       	in	r24, 0x3a	; 58
 228:	80 72       	andi	r24, 0x20	; 32
 22a:	8a bf       	out	0x3a, r24	; 58
}
		

int transmit_data(unsigned char data_send)
{
		SPDR=data_send;				//välj data som skickas och starta överföring
 22c:	6f b9       	out	0x0f, r22	; 15
		while(!(SPSR & (1<<SPIF))) 	//vänta på att alla data skiftats
 22e:	77 9b       	sbis	0x0e, 7	; 14
 230:	fe cf       	rjmp	.-4      	; 0x22e <send_to_sensor+0x18>
		{
		;
		}
		return SPDR;  //clears SPIF och returnerar data som skiftats in
 232:	6f b1       	in	r22, 0x0f	; 15
		{
		;
		}
		GIFR = GIFR & 0x20;						
		data=transmit_data(data);		//Byt data
		PORTB |= (1<<PB3);		//Hög SS till sensorenhet
 234:	c3 9a       	sbi	0x18, 3	; 24
		
		tolka_och_skicka(header,data);	//Skicka data vidare
 236:	89 2f       	mov	r24, r25
 238:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <tolka_och_skicka>
		return 0;
}
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	08 95       	ret

00000242 <__vector_18>:
char USARTReadChar();
void USART_write_char(unsigned char data);


ISR(INT2_vect) //sensor REQ,
{
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	2f 93       	push	r18
 24e:	3f 93       	push	r19
 250:	4f 93       	push	r20
 252:	5f 93       	push	r21
 254:	6f 93       	push	r22
 256:	7f 93       	push	r23
 258:	8f 93       	push	r24
 25a:	9f 93       	push	r25
 25c:	af 93       	push	r26
 25e:	bf 93       	push	r27
 260:	ef 93       	push	r30
 262:	ff 93       	push	r31
		send_to_sensor(0x00,0x00);
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	60 e0       	ldi	r22, 0x00	; 0
 268:	0e 94 0b 01 	call	0x216	; 0x216 <send_to_sensor>
}
 26c:	ff 91       	pop	r31
 26e:	ef 91       	pop	r30
 270:	bf 91       	pop	r27
 272:	af 91       	pop	r26
 274:	9f 91       	pop	r25
 276:	8f 91       	pop	r24
 278:	7f 91       	pop	r23
 27a:	6f 91       	pop	r22
 27c:	5f 91       	pop	r21
 27e:	4f 91       	pop	r20
 280:	3f 91       	pop	r19
 282:	2f 91       	pop	r18
 284:	0f 90       	pop	r0
 286:	0f be       	out	0x3f, r0	; 63
 288:	0f 90       	pop	r0
 28a:	1f 90       	pop	r1
 28c:	18 95       	reti

0000028e <send_to_styr>:



int send_to_styr(unsigned char header,unsigned char data)
{
		PORTB &= ~(1<<PB4);		//Låg SS till styrenhet
 28e:	c4 98       	cbi	0x18, 4	; 24
}
		

int transmit_data(unsigned char data_send)
{
		SPDR=data_send;				//välj data som skickas och starta överföring
 290:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF))) 	//vänta på att alla data skiftats
 292:	77 9b       	sbis	0x0e, 7	; 14
 294:	fe cf       	rjmp	.-4      	; 0x292 <send_to_styr+0x4>
		{
		;
		}
		return SPDR;  //clears SPIF och returnerar data som skiftats in
 296:	9f b1       	in	r25, 0x0f	; 15

int send_to_styr(unsigned char header,unsigned char data)
{
		PORTB &= ~(1<<PB4);		//Låg SS till styrenhet
		header=transmit_data(header); //Byt header
		while(!(GIFR & (1<<INTF1))) 	//vänta på att andra enheten läst data
 298:	0a b6       	in	r0, 0x3a	; 58
 29a:	07 fe       	sbrs	r0, 7
 29c:	fd cf       	rjmp	.-6      	; 0x298 <send_to_styr+0xa>
		{
		;
		}
		GIFR = GIFR & 0x80;
 29e:	8a b7       	in	r24, 0x3a	; 58
 2a0:	80 78       	andi	r24, 0x80	; 128
 2a2:	8a bf       	out	0x3a, r24	; 58
}
		

int transmit_data(unsigned char data_send)
{
		SPDR=data_send;				//välj data som skickas och starta överföring
 2a4:	6f b9       	out	0x0f, r22	; 15
		while(!(SPSR & (1<<SPIF))) 	//vänta på att alla data skiftats
 2a6:	77 9b       	sbis	0x0e, 7	; 14
 2a8:	fe cf       	rjmp	.-4      	; 0x2a6 <send_to_styr+0x18>
		{
		;
		}
		return SPDR;  //clears SPIF och returnerar data som skiftats in
 2aa:	6f b1       	in	r22, 0x0f	; 15
		{
		;
		}
		GIFR = GIFR & 0x80;
		data=transmit_data(data);			//Byt data
		PORTB |= (1<<PB4);
 2ac:	c4 9a       	sbi	0x18, 4	; 24
		tolka_och_skicka(header,data);
 2ae:	89 2f       	mov	r24, r25
 2b0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <tolka_och_skicka>
		return 0;
		}
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	08 95       	ret

000002ba <__vector_2>:
{
		send_to_sensor(0x00,0x00);
}

ISR(INT1_vect) //styr REQ
{
 2ba:	1f 92       	push	r1
 2bc:	0f 92       	push	r0
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	0f 92       	push	r0
 2c2:	11 24       	eor	r1, r1
 2c4:	2f 93       	push	r18
 2c6:	3f 93       	push	r19
 2c8:	4f 93       	push	r20
 2ca:	5f 93       	push	r21
 2cc:	6f 93       	push	r22
 2ce:	7f 93       	push	r23
 2d0:	8f 93       	push	r24
 2d2:	9f 93       	push	r25
 2d4:	af 93       	push	r26
 2d6:	bf 93       	push	r27
 2d8:	ef 93       	push	r30
 2da:	ff 93       	push	r31
		send_to_styr(0x00,0x00);	
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	0e 94 47 01 	call	0x28e	; 0x28e <send_to_styr>
}
 2e4:	ff 91       	pop	r31
 2e6:	ef 91       	pop	r30
 2e8:	bf 91       	pop	r27
 2ea:	af 91       	pop	r26
 2ec:	9f 91       	pop	r25
 2ee:	8f 91       	pop	r24
 2f0:	7f 91       	pop	r23
 2f2:	6f 91       	pop	r22
 2f4:	5f 91       	pop	r21
 2f6:	4f 91       	pop	r20
 2f8:	3f 91       	pop	r19
 2fa:	2f 91       	pop	r18
 2fc:	0f 90       	pop	r0
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	0f 90       	pop	r0
 302:	1f 90       	pop	r1
 304:	18 95       	reti

00000306 <_exit>:
 306:	f8 94       	cli

00000308 <__stop_program>:
 308:	ff cf       	rjmp	.-2      	; 0x308 <__stop_program>
